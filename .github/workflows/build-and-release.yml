name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Test
      run: go test -v ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin, freebsd]
        goarch: [386, amd64, arm, arm64]
        exclude:
          - goarch: 386
            goos: darwin
          - goarch: arm
            goos: darwin
          - goarch: 386
            goos: windows
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="pipet-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          output_name="$output_name.exe"
        fi
        go build -v -o $output_name ./cmd/pipet

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: pipet-${{ matrix.goos }}-${{ matrix.goarch }}
        path: pipet-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Display structure of downloaded files
      run: ls -R

    - name: Create Release Assets
      run: |
        for dir in pipet-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            if [[ "$dir" == *"windows"* ]]; then
              zip "../$dir.zip" *
            else
              tar czf "../$dir.tar.gz" *
            fi
            cd ..
          fi
        done

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.zip
          *.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
